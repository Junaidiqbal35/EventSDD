/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eventmangement;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Nasir Iqbal
 */
public class uploadEvent extends javax.swing.JFrame {

    /**
     * Creates new form uploadEvent
     */
    public uploadEvent() {
        initComponents();
       Display_Event_in_Table();
    }
    public Connection getConnection(){ 
        Connection conn = null;
        Statement st = null;
        ResultSet result = null;
        try{
             //conn= DriverManager.getConnection("jdbc:mysql://localhost:3306/", "event", "event");
            conn= DriverManager.getConnection("jdbc:derby://localhost:1527/Event", "event", "event");
            return conn;
        }
        catch(Exception exp){
            exp.printStackTrace();
            return null;
        }
        
    }
    public boolean input_Check(){
        boolean flag = false;
       if (eventNameField.getText()==null || eventDiscriptionField.getText()==null
               ||participantField.getText()==null||emailField.getText()==null||add_Date.getDate()==null)
         {
            return flag= false;
         }
       else
       {
           return flag =true;
       }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        eventNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        eventDiscriptionField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        participantField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        InsertButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Event_Table = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        eventId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        updatebtn = new javax.swing.JButton();
        Deletebtn = new javax.swing.JButton();
        add_Date = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("       Add Event ");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 255));
        jLabel1.setText("Event Name     ");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 255));
        jLabel2.setText("Event Discription");

        eventDiscriptionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventDiscriptionFieldActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 204));
        jLabel5.setText("Number of Participant");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 153, 204));
        jLabel6.setText("Email :");

        InsertButton.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        InsertButton.setForeground(new java.awt.Color(0, 51, 51));
        InsertButton.setText("insert");
        InsertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertButtonActionPerformed(evt);
            }
        });

        Event_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Event Name", "Event Discription", "Date", "Participant", "Email"
            }
        ));
        Event_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Event_TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Event_Table);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 204));
        jLabel8.setText("Date:");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 255));
        jLabel4.setText("ID");

        updatebtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        updatebtn.setForeground(new java.awt.Color(0, 51, 51));
        updatebtn.setText("update");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        Deletebtn.setText("Delete");
        Deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(participantField))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(88, 88, 88)
                                        .addComponent(emailField))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel8))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(37, 37, 37)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(eventNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(eventDiscriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(eventId, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(50, 50, 50)
                                                .addComponent(add_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(49, 49, 49))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(InsertButton)
                        .addGap(27, 27, 27)
                        .addComponent(Deletebtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(32, 32, 32)
                    .addComponent(updatebtn)
                    .addContainerGap(844, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eventId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(eventNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eventDiscriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(add_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(participantField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(InsertButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(Deletebtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(38, 38, 38))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(336, Short.MAX_VALUE)
                    .addComponent(updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(37, 37, 37)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eventDiscriptionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventDiscriptionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventDiscriptionFieldActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
        // TODO add your handling code here:
       String updateQuery =null;
       PreparedStatement ps = null;
       Connection conn = getConnection();
       
       if(input_Check() && eventId.getText()!=null){
           
        
           try {
               updateQuery ="UPDATE ADDEVENT SET EVENT_NAME = ? , EVENT_DISCRIPTION= ? ,PARTICIPANT = ? Where ID = ?";
               ps = conn.prepareStatement(updateQuery);
                ps.setString(1,eventNameField.getText());
                 ps.setString(2,eventDiscriptionField.getText() );
                  int participant = Integer.parseInt(participantField.getText());
                  ps.setInt(3,participant);
                  int id = Integer.parseInt(eventId.getText());
                  ps.setInt(4,id);
                  
                 ps.executeUpdate();
                JOptionPane.showMessageDialog(null,"updated");
                  
                  
             
           } catch (SQLException ex) {
               Logger.getLogger(uploadEvent.class.getName()).log(Level.SEVERE, null, ex);
           }
         
       
       }
        
        
        
        
    }//GEN-LAST:event_updatebtnActionPerformed

    private void InsertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertButtonActionPerformed
        // TODO add your handling code here:
        if(input_Check()){
            Connection conn = getConnection();
            //int participant = Integer.parseInt(participantField.getText());
            //int id = Integer.parseInt(eventId.getText());
            //  String query = "INSERT INTO EVENT.ADDEVENT (ID, EVENT_NAME,EVENT_DISCRIPTION,PARTICIPANT, EMAIL) VALUES ( +id+,'"+eventNameField.getText().toString()+"','"+eventDiscriptionField.getText().toString()+"',+participant+ '"+ emailField.getText().toString()+"')";

            //   executeSqlQuery(query,"inserted");
            //
            //  ps.setString(1,)
            //                ps.setString(2,eventNameField.getText());
            //                ps.setString(3,eventDiscriptionField.getText() );
            //                ps.setString(4,type.getText());
            //                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-DD");
            //                String addDate = dateFormat.format(date.getDateFormat());
            //                ps.setString(4, addDate);
            //                ps.setString(5,participantField.getText());
            //                ps.setString(6,emailField.getText());
            try {

                PreparedStatement ps = conn.prepareStatement("INSERT INTO EVENT.ADDEVENT (ID, EVENT_NAME,EVENT_DISCRIPTION,PARTICIPANT, EMAIL,DATE) VALUES (?,?,?,?,?,?)");
                int participant = Integer.parseInt(participantField.getText());
                int id = Integer.parseInt(eventId.getText());
                ps.setInt(1,id);
                ps.setString(2,eventNameField.getText());
                ps.setString(3,eventDiscriptionField.getText() );

                ps.setInt(4,participant);
                ps.setString(5,emailField.getText());

                String pattern  = "yyyy-MM-dd";
                SimpleDateFormat dateFormat = new SimpleDateFormat(pattern);
                 String addEventDate;

               addEventDate = dateFormat.format(add_Date.getDate());
               ps.setString(6, addEventDate);
                    
                   
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null,"Inserted");

            } catch (SQLException ex) {
                Logger.getLogger(uploadEvent.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        else{
            JOptionPane.showMessageDialog(null,"One or More Filed are Empty");
        }
    }//GEN-LAST:event_InsertButtonActionPerformed

    private void Event_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Event_TableMouseClicked
        // TODO add your handling code here:
         int i  = Event_Table.getSelectedRow();
        TableModel model = Event_Table.getModel();
       
        eventId.setText(model.getValueAt(i,0).toString());
        eventNameField.setText(model.getValueAt(i,1).toString());
        eventDiscriptionField.setText(model.getValueAt(i,2).toString());
      
        try{
            Date addDate=null;
            addDate = new SimpleDateFormat("dd/MM/yyyy").parse((String)( model.getValueAt(i, 3)));
            
                 
            
        } catch (ParseException ex) {
            Logger.getLogger(uploadEvent.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
       participantField.setText(model.getValueAt(i,4).toString());
       emailField.setText(model.getValueAt(i,5).toString());
        
    }//GEN-LAST:event_Event_TableMouseClicked

    private void DeletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebtnActionPerformed
        // TODO add your handling code here:
        
        String deleteQuery =null;
       PreparedStatement ps = null;
       Connection conn = getConnection();
       
     if(eventId.getText()!=null){
        try{
               deleteQuery ="Delete from ADDEVENT  Where ID = ?";
               ps = conn.prepareStatement(deleteQuery);
               int id = Integer.parseInt(eventId.getText());
                ps.setInt(1,id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null,"Deleted");
                
    }//GEN-LAST:event_DeletebtnActionPerformed
       catch (SQLException ex) {
               // Logger.getLogger(uploadEvent.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(null," Not Deleted");
            }
        
       }
       }
    public ArrayList<myEventList> getEventList(){
        ArrayList<myEventList> eventList = new ArrayList<myEventList>();
        Connection conn = getConnection();
        Statement st = null;
        ResultSet rs = null;
        String query = "Select *from ADDEVENT";
        try {
            st = conn.createStatement();
            rs = st.executeQuery(query);
            myEventList event1;
            while(rs.next()){
                event1 = new myEventList (
                        rs.getInt("ID"),
                        rs.getString("Event_Name"),
                        rs.getString("Event_Discription"),
                        rs.getString("Date"),
                        rs.getInt("Participant"),rs.getString("Email"));
                        
                
                        
                eventList.add(event1);
      
                
            
            }
            
        }
        catch(Exception e){
                
                e.printStackTrace();
                }
        return eventList;
 
    }
    public void Display_Event_in_Table(){
        ArrayList<myEventList> eventList =  getEventList() ;
        
        DefaultTableModel model = (DefaultTableModel)Event_Table.getModel() ;
        Object row[] = new Object [6];
        for (int i =0; i<eventList.size(); i++){
        
            row[0] = eventList.get(i).getId();
            row[1] = eventList.get(i).getEventName();
            row[2] = eventList.get(i).getEventDiscription();
            row[3] = eventList.get(i).getDate();
            row[4] = eventList.get(i).getParticipant();
            row[5] = eventList.get(i).getEmail();
           
            
            model.addRow(row);
            
        
        
    
    }
  }
    public void executeSqlQuery (String Query, String message){
        
        Connection conn = getConnection();
        Statement st;
        try {
            st = conn.createStatement();
            if (st.executeUpdate(Query)==1){
                
                JOptionPane.showMessageDialog(null,"Data"+  message + "Successfull");
            
            }
            else{
                   JOptionPane.showMessageDialog(null,"Data Not"+  message);
            }
            
            
        }
        catch(Exception ex){
            
            ex.printStackTrace();
        
        }        
    
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(uploadEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(uploadEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(uploadEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(uploadEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new uploadEvent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Deletebtn;
    private javax.swing.JTable Event_Table;
    private javax.swing.JButton InsertButton;
    private com.toedter.calendar.JDateChooser add_Date;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField eventDiscriptionField;
    private javax.swing.JTextField eventId;
    private javax.swing.JTextField eventNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField participantField;
    private javax.swing.JButton updatebtn;
    // End of variables declaration//GEN-END:variables
}
